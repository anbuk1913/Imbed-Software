<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Categories</title>
    <link rel="icon" href="/images/logo.png">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Afacad+Flux:wght@100..1000&display=swap" rel="stylesheet">
    <style>
        * {
            font-family: "Afacad Flux", serif;
            font-weight: 700;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .modal {
            backdrop-filter: blur(10px);
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }

        .toast {
            display: none;
            background-color: #ff6600;
            color: white;
            padding: 15px 30px;
            border-radius: 12px;
            font-size: 16px;
            text-align: center;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            opacity: 0;
            transform: translateX(100%);
            animation: slideInFromRight 0.8s ease-out forwards;
        }

        @keyframes slideInFromRight {
            0% {
                opacity: 0;
                transform: translateX(100%);
            }

            100% {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes slideOutToRight {
            0% {
                opacity: 1;
                transform: translateX(0);
            }

            100% {
                opacity: 0;
                transform: translateX(100%);
            }
        }
    </style>
</head>

<body>
    <%- include('../adminPartials/header') %>
        <!-- Categories Section -->
        <div class="container my-4">
            <div class="d-flex justify-content-between mb-3">
                <h2>Categories</h2>
                <div class="toast-container"></div>
                <!-- Add New Category Button -->
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                    Add New Category
                </button>
            </div>
            <input type="text" class="form-control w-25" style="margin-bottom: 10px;" placeholder="Search Category">

            <!-- Table -->
            <table class="table table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>List / Unlist</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% categories.forEach(category=> { %>
                        <tr>
                            <td>
                                <%= category.categoryName %>
                            </td>
                            <td>
                                <%= category.categoryDescription %>
                            </td>
                            <td>
                                <% if (category.isListed) { %>
                                    <button class="btn btn-danger list-toggle" data-id="<%= category._id %>"
                                        data-action="unlist">Unlist</button>
                                    <% } else { %>
                                        <button class="btn btn-success list-toggle" data-id="<%= category._id %>"
                                            data-action="list">List</button>
                                        <% } %>
                            </td>
                            <td>
                                <!-- Edit Button -->
                                <button class="btn btn-primary" data-bs-toggle="modal"
                                    data-bs-target="#editCategoryModal" data-id="<%= category._id %>"
                                    data-name="<%= category.categoryName %>"
                                    data-description="<%= category.categoryDescription %>">
                                    Edit
                                </button>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>

            <!-- Edit Category Modal -->
            <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel"
                aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editForm">
                                <input type="hidden" id="categoryId" name="id"> <!-- Hidden field for category ID -->
                                <div class="mb-3">
                                    <label for="editCategoryName" class="form-label">Category Name</label>
                                    <input type="text" class="form-control" id="editCategoryName" name="name">
                                    <small class="text-danger d-none" id="editCategoryNameError">Please enter a category
                                        name.</small>
                                </div>
                                <div class="mb-3">
                                    <label for="editCategoryDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editCategoryDescription" name="description"
                                        rows="4"></textarea>
                                    <small class="text-danger d-none" id="editCategoryDescriptionError">Please provide a
                                        description.</small>
                                </div>
                                <button type="submit" class="btn btn-success">Save Changes</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Category Modal -->
        <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addCategoryModalLabel">Add New Category</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                            id="closeModalButton"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addCategoryForm">
                            <div class="mb-3">
                                <label for="categoryName" class="form-label">Category Name</label>
                                <input type="text" class="form-control" id="categoryName" name="categoryName" required>
                                <small class="text-danger d-none" id="editCategoryNameError">Please enter a category
                                    name.</small>
                            </div>
                            <div class="mb-3">
                                <label for="categoryDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="categoryDescription" name="categoryDescription"
                                    rows="4" required></textarea>
                                <small class="text-danger d-none" id="editCategoryDescriptionError">Please provide a
                                    description.</small>
                            </div>
                            <p style="display: none; color: red;" id="">Category already exits</p>
                            <button type="submit" class="btn btn-success">Save</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>


    <%- include('../adminPartials/footer') %>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

            <script>
                // JavaScript for displaying custom error messages
                document.getElementById('addCategoryForm').addEventListener('submit', function (event) {
                    let isValid = true;

                    // Validate Category Name
                    const categoryName = document.getElementById('categoryName');
                    const categoryNameError = document.getElementById('categoryNameError');
                    if (!categoryName.value.trim()) {
                        categoryNameError.classList.remove('d-none');
                        isValid = false;
                    } else {
                        categoryNameError.classList.add('d-none');
                    }

                    // Validate Description
                    const categoryDescription = document.getElementById('categoryDescription');
                    const categoryDescriptionError = document.getElementById('categoryDescriptionError');
                    if (!categoryDescription.value.trim()) {
                        categoryDescriptionError.classList.remove('d-none');
                        isValid = false;
                    } else {
                        categoryDescriptionError.classList.add('d-none');
                    }

                    // Prevent form submission if validation fails
                    if (!isValid) {
                        event.preventDefault();
                    }
                });

                // JavaScript to clear the form when the modal close button is clicked
                const closeModalButton = document.getElementById('closeModalButton');
                const addCategoryForm = document.getElementById('addCategoryForm');

                closeModalButton.addEventListener('click', function () {    
                    // Reset the form fields
                    addCategoryForm.reset();

                    // Hide any visible error messages
                    document.getElementById('categoryNameError').classList.add('d-none');
                    document.getElementById('categoryDescriptionError').classList.add('d-none');
                });

                // Handling the form submission and sending data to server
                $('#addCategoryForm').on('submit', async function (event) {
                    event.preventDefault();
                    let formData = {
                        categoryName: $('#categoryName').val(),
                        categoryDescription: $('#categoryDescription').val()
                    };

                    let response = await fetch('/addcategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });

                    const result = await response.json();

                    const toastContainer = document.querySelector(".toast-container");
                    const toast = document.createElement("div");
                    toast.className = "toast";

                    if (result.categoryExists) {
                        toast.textContent = "Category already exists!";
                        toast.style.backgroundColor = "#dc3545"; // Red color for error
                        toastContainer.appendChild(toast);
                        setTimeout(() => {
                            toast.style.display = "block";
                        }, 100);

                        setTimeout(() => {
                            toast.style.animation = "slideOutToRight 0.8s ease-out forwards";
                        }, 3000);

                        setTimeout(() => {
                            toast.style.display = "none";
                            toast.remove(); // Remove toast from DOM
                        }, 3800);
                    } else if (result.success) {
                        toast.textContent = "Category Added Successfully!";
                        toast.style.backgroundColor = "#28a745"; // Green color for success
                        toastContainer.appendChild(toast);

                        setTimeout(() => {
                            toast.style.display = "block";
                        }, 100);

                        setTimeout(() => {
                            toast.style.animation = "slideOutToRight 0.8s ease-out forwards";
                        }, 2000);

                        setTimeout(() => {
                            toast.style.display = "none";
                            toast.remove(); // Remove toast from DOM
                            window.location.reload()
                        }, 2800);
                    } else {
                        await Swal.fire({
                            icon: "error",
                            title: "Something went wrong",
                            text: "Please try again later."
                        });
                    }
                });
            </script>

            <script>
                // List Or Unlist
                const toastContainer = document.querySelector(".toast-container");
                const toast = document.createElement("div");
                toast.className = "toast";
                document.querySelectorAll('.list-toggle').forEach(button => {
                    button.addEventListener('click', async function () {
                        const categoryId = this.dataset.id; // Get the category ID
                        const action = this.dataset.action; // Get the action (list or unlist)

                        try {
                            // Send a request to the server to toggle the list/unlist status
                            const response = await fetch(`/categories/${action}/${categoryId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            const result = await response.json();

                            if (result.success) {
                                toast.textContent = result.message;
                                toast.style.backgroundColor = "#28a745"; // Green color for success
                                toastContainer.appendChild(toast);

                                setTimeout(() => {
                                    toast.style.display = "block";
                                }, 100);

                                setTimeout(() => {
                                    toast.style.animation = "slideOutToRight 0.8s ease-out forwards";
                                }, 2000);

                                setTimeout(() => {
                                    toast.style.display = "none";
                                    toast.remove(); // Remove toast from DOM
                                    window.location.reload()
                                }, 2800);
                            } else {
                                toast.textContent = result.message;
                                toast.style.backgroundColor = "#dc3545"; // Red color for error
                                toastContainer.appendChild(toast);
                                setTimeout(() => {
                                    toast.style.display = "block";
                                }, 100);

                                setTimeout(() => {
                                    toast.style.animation = "slideOutToRight 0.8s ease-out forwards";
                                }, 2000);

                                setTimeout(() => {
                                    toast.style.display = "none";
                                    toast.remove(); // Remove toast from DOM
                                }, 2800);
                            }
                        } catch (error) {
                            console.log(error);
                        }
                    });
                });
            </script>

            <script>
                // Edit Form Submission and Validation
                document.getElementById('editForm').addEventListener('submit', async function (event) {
                    event.preventDefault();
                    let isValid = true;

                    // Validate Category Name
                    const categoryName = document.getElementById('editCategoryName');
                    const categoryNameError = document.getElementById('editCategoryNameError');
                    if (!categoryName.value.trim()) {
                        categoryNameError.classList.remove('d-none');
                        isValid = false;
                    } else {
                        categoryNameError.classList.add('d-none');
                    }

                    // Validate Description
                    const categoryDescription = document.getElementById('editCategoryDescription');
                    const categoryDescriptionError = document.getElementById('editCategoryDescriptionError');
                    if (!categoryDescription.value.trim()) {
                        categoryDescriptionError.classList.remove('d-none');
                        isValid = false;
                    } else {
                        categoryDescriptionError.classList.add('d-none');
                    }

                    if (!isValid) return;

                    // Prepare Form Data
                    const formData = {
                        _id: document.getElementById('categoryId').value,
                        categoryName: categoryName.value,
                        categoryDescription: categoryDescription.value
                    };

                    // Submit Data to Server
                    try {
                        let response = await fetch('/categories/edit', {
                            method: 'put',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        });

                        const result = await response.json();
                        const toastContainer = document.querySelector(".toast-container");
                        const toast = document.createElement("div");
                        toast.className = "toast";

                        if (!result.success) {
                            toast.textContent = result.message;
                            toast.style.backgroundColor = "#dc3545"; // Red color
                            toastContainer.appendChild(toast);
                            setTimeout(() => {
                                toast.style.display = "block";
                            }, 100);

                            setTimeout(() => {
                                toast.style.animation = "slideOutToRight 0.8s ease-out forwards";
                            }, 2000);

                            setTimeout(() => {
                                toast.style.display = "none";
                                toast.remove(); // Remove toast from DOM
                            }, 2800);
                        } else if (result.success) {
                            toast.textContent = result.message;
                            toast.style.backgroundColor = "#28a745"; // Green color
                            toastContainer.appendChild(toast);
                            setTimeout(() => {
                                toast.style.display = "block";
                            }, 100);

                            setTimeout(() => {
                                toast.style.animation = "slideOutToRight 0.8s ease-out forwards";
                            }, 2000);

                            setTimeout(() => {
                                toast.style.display = "none";
                                toast.remove(); // Remove toast from DOM
                                window.location.reload()
                            }, 2800);
                        } else {
                            throw new Error("Something went wrong");
                        }

                        toastContainer.appendChild(toast);
                        setTimeout(() => toast.style.display = "block", 100);
                        setTimeout(() => toast.style.animation = "slideOutToRight 0.8s ease-out forwards", 3000);
                        setTimeout(() => {
                            toast.style.display = "none";
                            toast.remove();
                            if (result.success) window.location.reload();
                        }, 3800);

                    } catch (error) {
                        await Swal.fire({
                            icon: "error",
                            title: "Something went wrong",
                            text: "Please try again later."
                        });
                    }
                });

                // Edit Modal Fill Data
                const editCategoryModal = document.getElementById('editCategoryModal');
                editCategoryModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const id = button.getAttribute('data-id');
                    const name = button.getAttribute('data-name');
                    const description = button.getAttribute('data-description');

                    document.getElementById('categoryId').value = id;
                    document.getElementById('editCategoryName').value = name;
                    document.getElementById('editCategoryDescription').value = description;
                });
            </script>
            <script>
                // JavaScript for search functionality
                document.querySelector("input[placeholder='Search Category']").addEventListener("input", function (event) {
                    const query = event.target.value.toLowerCase(); // Get the search query and convert it to lowercase
                    const rows = document.querySelectorAll("table tbody tr"); // Get all rows in the table
            
                    rows.forEach(row => {
                        const categoryName = row.children[0].textContent.toLowerCase(); // Get Category Name (1st column)
                        const categoryDescription = row.children[1].textContent.toLowerCase(); // Get Category Description (2nd column)
            
                        // Check if the query matches either Category Name (1st priority) or Category Description (2nd priority)
                        if (categoryName.includes(query) || categoryDescription.includes(query)) {
                            row.style.display = ""; // Show the row if it matches
                        } else {
                            row.style.display = "none"; // Hide the row if it doesn't match
                        }
                    });
                });
            </script>
</body>

</html>